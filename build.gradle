/*
 * After A LOT of research, I have finally figured out what is going wrong with
 * my JAR files:
 * 1. by default, Gradle DOES NOT bundle dependencies in the Jar task. This is
 *    meant to avoid duplication if the client has the dependencies already
 *    installed
 * 2. by default, Gradle DOES NOT set the main class in the Jar task. That way,
 *    clients can specify which class they wish to use as the main class. This
 *    doesn't make a whole lot of sense to me, as I would assume the entire 
 *    point of an application is to have a well defined main class
 * 3. it looks like the main class is set by some other function / script when
 *    they call the Jar file. This does not make sense to me, as I have always 
 *    assumed the Jar file is supposed to be the sole distribution of the system, 
 *    and thus should be self-contained, but perhaps my assumption is wrong
*/

/*
Gradle currently generates warnings, but those are caused by how Netbeans
configures tasks. Change org.gradle.warning.mode to all in gradle.properties to
enable these warnings
*/

plugins {
    id 'application'
}

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// has problems changing main class, so I'm using this instead
def runMain = 'start.MainWindow'
def testMain = 'gui.pages.worldPlay.WorldCanvasTester'

def testing = false // !!! CHANGE THIS LINE TO SWITCH TO/FROM TESTING !!!

def main = (testing) ? testMain : runMain

// NetBeans 8.2 requires this line for debug to work
mainClassName = main

application {
    // Netbeans cannot do "run file" option if I include this line
    mainClass = main
}

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/javax.json/javax.json-api
    implementation 'javax.json:javax.json-api:1.1.4'
    implementation 'org.glassfish:javax.json:1.1'
}


jar {
    manifest {
        attributes(
            'Main-Class' : main
        )
    }
}

tasks.withType(JavaCompile){
    options.compilerArgs << "-Xlint:unchecked"
}

tasks.register('fatJar', Jar){
    archiveClassifier = 'complete'
    duplicatesStrategy = 'include'
    
    //include dependencies in JAR file
    from sourceSets.main.output
    
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith(".jar") }.collect {zipTree(it)}
    }
    manifest {
        attributes(
            'Main-Class' : main
        )
    }
}