package orpheus.core.world.graph.particles;

import java.awt.Color;
import java.awt.Graphics;

import javax.json.Json;
import javax.json.JsonObject;

import orpheus.core.world.graph.GraphElement;
import util.Direction;

/**
 * Serializes and renders a particle.
 * 
 * Due to the sheer number of particles generated by projectiles, and because
 * they have no effect on gameplay, particles are not serialized by the server,
 * and are instead generated by the client, who is responsible for moving them.
 */
public class Particle implements GraphElement {
    private static final int RADIUS = 5;

    private int x;
    private int y;
    private final int speed;
    private final Direction facing;
    private final Color color;

    public Particle(int x, int y, int speed, Direction facing, Color color) {
        this.x = x;
        this.y = y;
        this.speed = speed;
        this.facing = facing;
        this.color = color;
    }

    public void move() {
        x += speed * facing.getXMod();
        y += speed * facing.getYMod();
    }

    @Override
    public void draw(Graphics g) {
        int r = RADIUS;
        g.setColor(color);
        g.fillRect(x-r, y-r, r*2, r*2);
    }
    
    @Override
    public JsonObject toJson() {
        return Json.createObjectBuilder()
            .add("x", x)
            .add("y", y)
            .add("speed", speed)
            .add("facing", facing.getDegrees())
            .add("color", color.getRGB())
            .build();
    }

    public static Particle fromJson(JsonObject json) {
        return new Particle(
            json.getInt("x"),
            json.getInt("y"),
            json.getInt("speed"),
            Direction.fromDegrees(json.getInt("facing")),
            new Color(json.getInt("color"))
        );
    }
}
